// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloAgain(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHelloAgain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) SayHelloAgain(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloAgain not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHelloAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHelloAgain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHelloAgain(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayHelloAgain",
			Handler:    _Greeter_SayHelloAgain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	// Sends Join game
	JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error)
	BeginGame(ctx context.Context, in *BeginRequest, opts ...grpc.CallOption) (*BeginReply, error)
	// Sends end game
	EndGame(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndReply, error)
	// Begin Stage
	BeginStageE1(ctx context.Context, in *BeginStageRequest, opts ...grpc.CallOption) (*BeginStageReply, error)
	BeginStageE2(ctx context.Context, in *BeginStageRequest, opts ...grpc.CallOption) (*BeginStageReply, error)
	BeginStageE3(ctx context.Context, in *BeginStageRequest, opts ...grpc.CallOption) (*BeginStageReply, error)
	SendJugadaE1(ctx context.Context, in *JugadaE1, opts ...grpc.CallOption) (*PlayerStatusE1, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) JoinGame(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinReply, error) {
	out := new(JoinReply)
	err := c.cc.Invoke(ctx, "/helloworld.Game/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BeginGame(ctx context.Context, in *BeginRequest, opts ...grpc.CallOption) (*BeginReply, error) {
	out := new(BeginReply)
	err := c.cc.Invoke(ctx, "/helloworld.Game/BeginGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) EndGame(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndReply, error) {
	out := new(EndReply)
	err := c.cc.Invoke(ctx, "/helloworld.Game/EndGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BeginStageE1(ctx context.Context, in *BeginStageRequest, opts ...grpc.CallOption) (*BeginStageReply, error) {
	out := new(BeginStageReply)
	err := c.cc.Invoke(ctx, "/helloworld.Game/BeginStageE1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BeginStageE2(ctx context.Context, in *BeginStageRequest, opts ...grpc.CallOption) (*BeginStageReply, error) {
	out := new(BeginStageReply)
	err := c.cc.Invoke(ctx, "/helloworld.Game/BeginStageE2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) BeginStageE3(ctx context.Context, in *BeginStageRequest, opts ...grpc.CallOption) (*BeginStageReply, error) {
	out := new(BeginStageReply)
	err := c.cc.Invoke(ctx, "/helloworld.Game/BeginStageE3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SendJugadaE1(ctx context.Context, in *JugadaE1, opts ...grpc.CallOption) (*PlayerStatusE1, error) {
	out := new(PlayerStatusE1)
	err := c.cc.Invoke(ctx, "/helloworld.Game/SendJugadaE1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	// Sends Join game
	JoinGame(context.Context, *JoinRequest) (*JoinReply, error)
	BeginGame(context.Context, *BeginRequest) (*BeginReply, error)
	// Sends end game
	EndGame(context.Context, *EndRequest) (*EndReply, error)
	// Begin Stage
	BeginStageE1(context.Context, *BeginStageRequest) (*BeginStageReply, error)
	BeginStageE2(context.Context, *BeginStageRequest) (*BeginStageReply, error)
	BeginStageE3(context.Context, *BeginStageRequest) (*BeginStageReply, error)
	SendJugadaE1(context.Context, *JugadaE1) (*PlayerStatusE1, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) JoinGame(context.Context, *JoinRequest) (*JoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedGameServer) BeginGame(context.Context, *BeginRequest) (*BeginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginGame not implemented")
}
func (UnimplementedGameServer) EndGame(context.Context, *EndRequest) (*EndReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}
func (UnimplementedGameServer) BeginStageE1(context.Context, *BeginStageRequest) (*BeginStageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginStageE1 not implemented")
}
func (UnimplementedGameServer) BeginStageE2(context.Context, *BeginStageRequest) (*BeginStageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginStageE2 not implemented")
}
func (UnimplementedGameServer) BeginStageE3(context.Context, *BeginStageRequest) (*BeginStageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginStageE3 not implemented")
}
func (UnimplementedGameServer) SendJugadaE1(context.Context, *JugadaE1) (*PlayerStatusE1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendJugadaE1 not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).JoinGame(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BeginGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BeginGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/BeginGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BeginGame(ctx, req.(*BeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).EndGame(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BeginStageE1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BeginStageE1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/BeginStageE1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BeginStageE1(ctx, req.(*BeginStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BeginStageE2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BeginStageE2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/BeginStageE2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BeginStageE2(ctx, req.(*BeginStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_BeginStageE3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).BeginStageE3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/BeginStageE3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).BeginStageE3(ctx, req.(*BeginStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SendJugadaE1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JugadaE1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SendJugadaE1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Game/SendJugadaE1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SendJugadaE1(ctx, req.(*JugadaE1))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGame",
			Handler:    _Game_JoinGame_Handler,
		},
		{
			MethodName: "BeginGame",
			Handler:    _Game_BeginGame_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _Game_EndGame_Handler,
		},
		{
			MethodName: "BeginStageE1",
			Handler:    _Game_BeginStageE1_Handler,
		},
		{
			MethodName: "BeginStageE2",
			Handler:    _Game_BeginStageE2_Handler,
		},
		{
			MethodName: "BeginStageE3",
			Handler:    _Game_BeginStageE3_Handler,
		},
		{
			MethodName: "SendJugadaE1",
			Handler:    _Game_SendJugadaE1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
